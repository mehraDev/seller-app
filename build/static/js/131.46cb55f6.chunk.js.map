{"version":3,"file":"static/js/131.46cb55f6.chunk.js","mappings":"0NAgJMA,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+EAMLF,EAAAA,GAAAA,IAAUG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,gFAMhBF,EAAAA,GAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6BAK5B,UAzJmC,WACjC,IAAAG,GAAmBC,EAAAA,EAAAA,UAAS,IAArBC,GAAwBC,EAAAA,EAAAA,GAAAH,EAAA,GAAhB,GACfI,GAAgCH,EAAAA,EAAAA,UAAyB,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAC5DE,GADeD,EAAA,GAAaA,EAAA,IACIJ,EAAAA,EAAAA,UAAiB,SAAOM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,GAAFD,EAAA,GAAaA,EAAA,IAC5BE,GAAoCR,EAAAA,EAAAA,UAA2B,QAAOS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GACtEE,GADgBD,EAAA,GAAgBA,EAAA,IACMT,EAAAA,EAAAA,aAAwBW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAC9DE,GADkBD,EAAA,GAAgBA,EAAA,IACAX,EAAAA,EAAAA,WAAS,IAAKa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKnB,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KACF,kBANkB,OAAAJ,EAAAU,MAAA,KAAAC,UAAA,KAQnBZ,GACF,GAAG,KACHD,EAAAA,EAAAA,YAAU,WACR,IAAMc,EAAU,eAAAC,GAAAZ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAW,EAAO/B,GAAgB,OAAAmB,EAAAA,EAAAA,KAAAG,MAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,OACxC,IAEgB,OACdnB,EADc,QAEdQ,GAAa,EACf,CAAE,MAAOmB,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,CAAC,wBAAAD,EAAAN,OAAA,GAAAK,EAAA,KACF,gBATeI,GAAA,OAAAL,EAAAH,MAAA,KAAAC,UAAA,KAWZ5B,IACFc,GAAa,GACbe,EAAW7B,GAEf,GAAG,CAACA,IAoEJ,OAAKa,GAIHuB,EAAAA,EAAAA,KAAC5C,EAAO,KAHD4C,EAAAA,EAAAA,KAAA,OAAAC,SAAK,cA6BhB,C","sources":["app/components/features/CatalogGenerator/CatalogGenerator.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Viewer from \"../ProductManager/Components/ProductsViewer/ProductsViewer\";\nimport Box, { Col, Row } from \"ui/basic/Box\";\nimport { IProductFood } from \"app/interfaces\";\nimport ImageSelection from \"./ImageSelection/ImageSelection\";\nimport { Text } from \"ui/basic\";\n\nconst CatalogGenerator: React.FC = () => {\n  const [sellerId] = useState(\"\");\n  const [products, setProducts] = useState<IProductFood[]>([]);\n  const [shopType, setShopType] = useState<string>('food');\n  const [formStage ,  setFormStage] = useState<'info' | 'image'>('info');\n  const [formProduct, setFormProduct] = useState<IProductFood>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        // setProducts(data);\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n\n    fetchProducts();\n  }, []);\n  useEffect(() => {\n    const onSellerId = async (sellerId: string) => {\n      try {\n        // Simulated API call\n        const shop =  'food' ;//await fetchShopType(sellerId)\n        setShopType(shop);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching shop type:\", error);\n      }\n    };\n\n    if (sellerId) {\n      setIsLoading(true);\n      onSellerId(sellerId);\n    }\n  }, [sellerId]);\n\n\n  // const handleInfoSubmit = (product: IProductFood) => {\n  //   setFormStage( 'image')\n  //   setFormProduct( product);\n  // }\n  // const handleAddProduct = (product: IProductFood) => {\n   \n  // };\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]; // Get the selected file\n\n    if (file) {\n      // Check if the file extension is \".menu\"\n      if (file.name.endsWith(\".menu\")) {\n        // Read the file content\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n          try {\n            const content = e.target?.result as string;\n            const parsedData = JSON.parse(content);\n            console.log(parsedData)\n            // Do something with the parsed data, e.g., add it to the products state\n            // Assuming the parsed data is an array of products:\n            setProducts((prevProducts) => [...prevProducts, ...parsedData]);\n          } catch (error) {\n            console.error(\"Error parsing file content:\", error);\n          }\n        };\n\n        reader.readAsText(file);\n      } else {\n        console.log(\"Invalid file format. Please select a .menu file.\");\n      }\n    }\n  };\n  const handleSaveCatalog = () => {\n    const jsonContent = JSON.stringify(products);\n    const blob = new Blob([jsonContent], { type: \"application/json\" });\n\n    // Create a URL for the Blob to create a downloadable link\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element and simulate a click to initiate download\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"catalog.menu\";\n    document.body.appendChild(link);\n    link.click();\n\n    // Clean up by revoking the URL\n    URL.revokeObjectURL(url);\n    document.body.removeChild(link);\n  };\n  // const [sellerIdInput,setSellerIdInput] = useState('');\n  // if(!sellerId){\n  //   return(\n  //     <Box>\n  //       <Col>\n  //       <Text>Enter Seller Id</Text>\n  //       <InputText value={sellerIdInput} onChange={value => setSellerIdInput(value)} />\n  //       <Button onClick={() => setSellerId(sellerIdInput)}>submit</Button>\n  //       </Col>\n  //     </Box>\n  //   )\n  // }\n  if (!isLoading) {\n    return <div>Loading...</div>; // Render a loading screen\n  }\n  return (\n    <Wrapper>\n      {/* <Row>\n        <Text>{shopType}</Text>\n      </Row>\n      <ControlPanel>\n      <input type=\"file\" accept=\".menu\" onChange={handleFileChange} />\n      <Button onClick={handleSaveCatalog}>Save Catalog</Button>\n        <Button>Export Catalog</Button>\n      </ControlPanel>\n      <Row>\n        <Box j=\"center\">\n        {formStage === 'info' ? \n        // <ProductForm shopType={'food'} onSubmit={(product) => handleInfoSubmit(product)}/>\n        <div></div>\n         :\n          <ImageSelection name={formProduct?.name as string} sellerId={sellerId} onImageSelected={function (: string): void {\n              throw new Error(\"Function not implemented.\");\n            } }/>\n        }\n        </Box>\n        <Box j=\"center\">\n          {products.length ? <Viewer shop={shopType} products={products}/> : <Col w=\"initial\">Emprty List</Col>}\n        </Box>\n      </Row> */}\n    </Wrapper>\n  );\n};\n\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst ControlPanel = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nconst Button = styled.button`\n  margin: 0 10px;\n`;\n\n\nexport default CatalogGenerator;\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_useState","useState","sellerId","_slicedToArray","_useState3","_useState4","_useState5","_useState6","setShopType","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","isLoading","setIsLoading","useEffect","fetchProducts","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","onSellerId","_ref2","_callee2","_context2","error","console","_x","_jsx","children"],"sourceRoot":""}